1
00:00:05,000 --> 00:00:08,900
Hallo - Python-Programmierung - Operatoren

2
00:00:09,000 --> 00:00:11,900
Operatoren sind - vereinfacht gesagt - Vorschriften

3
00:00:12,000 --> 00:00:15,900
durch die aus zwei Objekten ein neues Objekt gebildet wird

4
00:00:16,000 --> 00:00:21,900
Die ueblichen mathematischen Operatoren sind sicher ebenso bekannt wie die Vergleichsoperatoren

5
00:00:22,000 --> 00:00:27,900
Ein Beispiel python ENTER - die interaktive Shell

6
00:00:28,000 --> 00:00:34,900
Ein + fuer die Addition, ein - fuer die Subtraktion

7
00:00:35,000 --> 00:00:44,900
ein * fuer die Multiplikation und ein / fuer die Division

8
00:00:45,000 --> 00:00:49,900
das waren die mathematischen Operatoren, jetzt die Vergleichsoperatoren

9
00:00:50,000 --> 00:01:09,900
2 < (kleiner als) 5 - 5 > (groesser als) 2 - 2 <= (kleiner als oder gleich) 5 - 5 >= (groesser als oder gleich) 2 

10
00:01:10,000 --> 00:01:14,900
Fuer Verwunderung sorgt vielleicht der Divisionsoperator

11
00:01:15,000 --> 00:01:19,900
/ liefert bis Python 3 ganzzahlige Ergebnisse

12
00:01:20,000 --> 00:01:23,900
wenn nicht explizit Fliesskommazahlen dividiert werden

13
00:01:24,000 --> 00:01:28,900
Erst ab Python 3 gibt dieser Operator Fliesskommazahlen zurueck

14
00:01:29,000 --> 00:01:31,900
wenn das Ergebnis keine natuerliche Zahl ist

15
00:01:32,000 --> 00:01:36,900
Auch auf den Unterschied des Vergleichsoperators ==

16
00:01:37,000 --> 00:01:40,900
und des Zuweisungsoperators = soll hingewiesen werden

17
00:01:41,000 --> 00:01:45,900
x == 3 liefert abhaengig von x entweder True oder False zurueck

18
00:01:46,000 --> 00:01:54,900
x = 3 dahingegen weist x den Wert 3 zu

19
00:01:55,000 --> 00:01:57,900
Gerade bei Anfaengern ist das eine beliebte Fehlerquelle

20
00:01:58,000 --> 00:02:15,900
Und jetzt der Vergleich x == 3 - das ist wahr, x == 2 - das ist falsch

21
00:02:16,000 --> 00:02:29,900
x != 2 hingegen gibt ein True zurueck wenn die Werte nicht gleich sind

22
00:02:30,000 --> 00:02:36,900
x != 3 - das ist wahr ( x = 3 )  also ist es falsch ( 3 != 3 )

23
00:02:39,000 --> 00:02:47,900
Der in-Operator kommt bei allen iterierbaren Objekten (also besonders Listen) zur Geltung

24
00:02:48,000 --> 00:02:50,900
Mit ihm laesst sich in Erfahrung bringen

25
00:02:51,000 --> 00:02:55,900
ob ein bestimmter Eintrag in einer Liste vorhanden ist

26
00:02:56,000 --> 00:03:10,900
zum Beispiel 5 in [1,5] - die 5 ist in der Liste also ein True

27
00:03:11,000 --> 00:03:16,900
5 in [1,3] - das ist falsch da 5 nicht in der Liste ist

28
00:03:17,000 --> 00:03:26,900
Die Operatoren and und or dienen zur Verknuepfung mehrere Wahrheitswerte

29
00:03:27,000 --> 00:03:41,900
Der Ausdruck 3 < 5 and 3 < 2 ist offensichtlich falsch

30
00:03:42,000 --> 00:03:56,900
der Ausdruck 3 < 5 or 3 < 2 dahingegen ist wahr

31
00:03:57,000 --> 00:04:03,900
Der Operator not dreht einen Wahrheitswert schlicht um

32
00:04:04,000 --> 00:04:20,900
Der Ausdruck 3 < 5 and not 3 < 2 ist also ebenfalls wahr

32
00:04:25,000 --> 00:04:27,900
Tschau und viel Glueck
